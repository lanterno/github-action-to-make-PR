projects:
  tinynf:
    name: tinyNF
    categories:
      - Verification
    applications:
      - Infra
    description: |
      A simpler and faster NIC driver model for network functions
    tech_desc: >
      By merely replacing the state-of-the-art driver with our driver, formal
      verification of the entire software stack completes in 7x less time, while
      the verified functions’ throughput improves by 160%.
    url: https://dslab.epfl.ch/research/tinynf/
    contacts:
      - name: Solal Pirelli
        email: solal.pirelli@epfl.ch
    tags:
      - Network
    type: Library
    code:
      type: Lab Github
      url: https://github.com/dslab-epfl/tinynf
      date_last_commit: 2023-02-17
    language: C
    license: MIT
    information:
      - type: Paper
        title: A Simpler and Faster NIC Driver Model for Network Functions
        url: https://infoscience.epfl.ch/record/282923
        notes:
          - label: Published in
            text: Usenix OSDI '20
            url: https://www.usenix.org/conference/osdi20/presentation/pirelli
    date_added: 2021-01-22
    date_updated: 2023-03-20
  vigor:
    name: Vigor
    categories:
      - Verification
    applications:
      - Infra
    description: Formally verified and performant software middleboxes
    tech_desc: >
      Software stack and toolchain for building and running software middleboxes
      that are guaranteed to be correct, while providing competitive performance
      and preserving developer productivity. With Vigor, developers write the
      middlebox code (i.e., the software network function, or NF) in C atop a
      standard packet-processing framework, putting persistent state in data
      structures from a Vigor-provided library. Vigor then automatically
      verifies that the resulting software stack correctly implements a
      specification (written in Python).
    url: https://vigor-nf.github.io/
    code:
      type: Project Github
      url: https://github.com/vigor-nf/vigor
      date_last_commit: 2021-03-06
    license: MIT
    tags:
      - Network
    information:
      - type: Paper
        title: Verifying Software Network Functions with No Verification Expertise
        url: https://infoscience.epfl.ch/record/275534
        notes:
          - label: Published in
            text: SOSP '19
            url: https://dl.acm.org/doi/10.1145/3341301.3359647
      - type: Paper
        title: A Formally Verified NAT Stack
        url: https://infoscience.epfl.ch/record/264620
      - type: Paper
        title: A Formally Verified NAT
        url: https://infoscience.epfl.ch/record/231983
    language: C, Python
    type: Framework
    maturity: 1
    date_added: 2019-07-26
    date_updated: 2022-07-05
  bolt:
    name: BOLT
    categories:
      - Verification
    applications:
      - Infra
    description: Performance contracts for software network functions
    layman_desc: >
      Software network functions (NFs), or middleboxes, promise flexibility and
      easy deployment of network services but face the serious challenge of
      unexpected performance behaviour. This behaviour makes it harder for
      network operators to provision their networks and exposes a new attack
      surface for adversaries seeking to degrade network performance. The goal
      of our work is to provide network operators and NF developers with
      comprehensive understanding of the NF’s entire performance profile, before
      it is deployed. Such understanding would, for instance, allow operators to
      conduct precise capacity planning and developers to make informed
      development decisions.
    tech_desc: >
      We propose the notion of performance contracts for NFs. A performance
      contract enables users to predict and scrutinize NF performance at fine
      granularities without having to run them. It provider users with an
      abstraction that enables them to easily parameterize arbitrary input
      workloads, whether typical, exceptional or adversarial. Given only this
      abstract description of the workload and not a concrete instance, the
      contract predicts the performance of the NF without actually running it.
      The performance predictions are in terms of human-readable formulae,
      expressed as a function of workload and environment variables, that we
      together call Performance Critical Variables (PCVs). informed development
      decisions.
    contacts:
      - name: Rishabh Iyer
        email: rishabh.iyer@epfl.ch
    url: https://bolt-perf-contracts.github.io/
    tags:
      - Network
    type: Application
    code:
      type: Project GitHub
      url: https://github.com/bolt-perf-contracts/bolt
      date_last_commit: 2019-08-05
    language: C
    information:
      - type: Paper
        title: Performance Contracts for Software Network Functions
        url: https://dslab.epfl.ch/pubs/bolt.pdf
        notes:
          - label: Published at
            text: USENIX NSDI '19
            url: https://www.usenix.org/conference/nsdi19/presentation/iyer
    date_added: 2021-02-03
    date_updated: 2022-07-05
  cpi:
    name: CPI
    categories:
      - Security
    applications:
      - Infra
    description: Fast and precise control-flow hijack protection
    tech_desc: >
      Code-Pointer Integrity (CPI) is a property of C/C++ programs that
      guarantees absence of control-flow hijack attacks by requiring integrity
      of all direct and indirect pointers to code. Code-Pointer Separation (CPS)
      is a simplified version of CPI that provides strong protection against
      such attacks in practice. SafeStack is a component of CPI/CPS, which can
      be used independently and protects against stack-based control-flow
      hijacks.
    url: https://dslab.epfl.ch/research/cpi/
    code:
      type: Project GitHub
      url: https://github.com/cpi-llvm
      date_last_commit: 2015-11-16
    contacts:
      - name: Volodymyr Kuznetsov
        url: http://volodymyrkuznetsov.info/
    tags:
      - Network
    type: Application
    information:
      - type: Paper
        title: Code-Pointer Integrity
        url: https://infoscience.epfl.ch/record/204783
        notes:
          - label: Published in
            text: OSDI '14
            url: https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-kuznetsov.pdf
      - type: Paper
        title: "Missing the Point(er): On the Effectiveness of Code Pointer Integrity"
        url: http://people.csail.mit.edu/rinard/paper/oakland15.pdf
        notes:
          - label: Published in
            text: Usenix S&P '15
    date_added: 2019-07-26
    date_updated: 2022-07-05
  s2e:
    name: S²E
    categories:
      - Security
    applications:
      - Infra
    description: Platform for writing tools that analyze the properties and behavior
      of software systems
    tech_desc: >
      S²E is a platform for writing tools that analyze the properties and
      behavior of software systems. S²E comes as a modular library that gives
      virtual machines symbolic execution and program analysis capabilities.
    url: https://s2e.systems/
    code:
      type: Project GitHub
      url: https://github.com/s2e
      date_last_commit: 2023-12-10
    language: C, C++
    license: MIT
    contacts:
      - name: Vitaly Chipounov
        email: vitaly@cyberheaven.io
    tags:
      - Code Analysis
      - Static Analysis
      - Attack
    information:
      - type: Paper
        title: "The S2E Platform: Design, Implementation, and Applications"
        url: http://dslab.epfl.ch/pubs/s2e-tocs.pdf
        notes:
          - label: Published in
            text: TOCs '12
            url: https://dl.acm.org/doi/10.1145/2110356.2110358
    type: Library
    date_added: 2019-03-18
    date_updated: 2024-03-08
  asap:
    name: ASAP
    categories:
      - Security
    applications:
      - Infra
    description: Low overhead software protection
    layman_desc: >
      Makes it possible to use powerful software protection mechanisms at a low
      performance overhead.
    url: https://dslab.epfl.ch/research/asap/
    code:
      type: Lab GitHub
      url: https://github.com/dslab-epfl/asap
      date_last_commit: 2015-12-03
    language: C++, assembly
    license: BSD-2-Clause
    contacts:
      - name: Jonas Wagner
        email: ltlygwayh@gmail.com
    tags:
      - Low-Level
    type: Library
    information:
      - type: Paper
        title: High System-Code Security with Low Overhead
        url: https://infoscience.epfl.ch/record/205055
        notes:
          - label: Published in
            text: IEEE S&P '15
            url: http://www.ieee-security.org/TC/SP2015/papers-archived/6949a866.pdf
      - type: Poster
        title: High Security at Low Overhead
        url: https://dslab.epfl.ch/pubs/asap_poster.pdf
        notes:
          - label: Presented at
            text: OSDI '14
            url: https://www.usenix.org/conference/osdi14/poster-sessions
    date_added: 2019-03-18
    date_updated: 2022-07-05
  cloud9:
    name: Cloud 9
    categories:
      - Security
    applications:
      - Infra
    description: Scalable symbolic execution
    tech_desc: >
      Parallel symbolic execution engine that scales on shared-nothing clusters
      of commodity hardware.
    url: http://cloud9.epfl.ch/
    code:
      type: Lab GitHub
      url: https://github.com/dslab-epfl/cloud9
      date_last_commit: 2013-09-11
    language: C, C++
    license: BSD-3-Clause
    contacts:
      - name: Stefan Bucur
        email: stefan.bucur@gmail.com
    tags:
      - Benchmark
      - Cloud
    information:
      - type: Paper
        title: Parallel Symbolic Execution for Automated Real-World Software Testing
        url: https://infoscience.epfl.ch/record/166069
        notes:
          - label: Published in
            text: EuroSys 2011
            url: http://eurosys2011.cs.uni-salzburg.at/pdf/eurosys2011-salomie.pdf
      - type: Paper
        title: Automated Software Testing as a Service
        url: https://dslab.epfl.ch/pubs/taas.pdf
        notes:
          - label: Published in
            text: SoCC 2010
            url: https://dl.acm.org/doi/proceedings/10.1145/1807128
      - type: Paper
        title: "Cloud9: A Software Testing Service"
        url: http://dslab.epfl.ch/pubs/cloud9-ladis.pdf
        notes:
          - label: Published in
            text: ACM Operating Systems Review 2009
            url: https://dl.acm.org/toc/sigops/2010/43/4
    type: Application
    date_added: 2019-03-18
    date_updated: 2022-07-05
  dimmunix:
    name: Dimmunix
    categories:
      - Security
    applications:
      - Infra
    description: Protection against deadlock bugs
    layman_desc: >
      Enables general-purpose applications to defend themselves against deadlock
      bugs, i.e. avoid deadlocks that they previously encountered.
    url: https://dslab.epfl.ch/research/dimmunix/
    code:
      type: Google Code
      url: https://code.google.com/archive/p/dimmunix/
      date_last_commit: 2012-04-24
    language: C, C++, Java
    contacts:
      - name: Horatiu Jula
        url: https://www.linkedin.com/in/horatiu-jula-63a02a7
    tags:
      - Concurrency
    type: Library
    information:
      - type: Paper
        title: Platform-wide Deadlock Immunity for Mobile Phones
        url: https://infoscience.epfl.ch/record/166080
        notes:
          - label: Published in
            text: 7th HotDep
            url: http://hotdep2011.cis.upenn.edu/
    date_added: 2019-03-18
    date_updated: 2022-07-05
  failure-sketching:
    name: Failure Sketching
    categories:
      - Security
      - Verification
    applications:
      - Infra
    description: Automated debugging technique
    tech_desc: >
      Failure sketching is an automated debugging technique that provides
      developers with an explanation (“failure sketch”) of the root cause of a
      failure that occurred in production. A failure sketch only contains
      program statements that lead to the failure, and it clearly shows the
      differences between failing and successful runs; these differences guide
      developers to the root cause.
    url: https://dslab.epfl.ch/research/gist/
    code:
      type: Lab GitHub
      url: https://github.com/dslab-epfl/bugbase
      date_last_commit: 2015-10-06
    language: Python
    license: BSD-3-Clause
    contacts:
      - name: Baris Kasici
        email: barisk@umich.edu
    tags:
      - Low-Level
      - Debug
      - Failure
    type: Application
    information:
      - type: Paper
        title: "Failure Sketching: A Technique for Automated Root Cause Diagnosis of
          In-Production Failures"
        url: https://dslab.epfl.ch/pubs/gist.pdf
        notes:
          - label: Published in
            text: SOSP '15
            url: https://dl.acm.org/doi/10.1145/2815400.2815412
    date_added: 2019-03-18
    date_updated: 2022-07-05
  conferr:
    name: ConfErr
    categories:
      - Security
    applications:
      - Infra
    description: Quantify the resilience of software systems to human-induced
      configuration errors
    layman_desc: >
      ConfErr uses human error models rooted in psychology and linguistics to
      generate realistic configuration mistakes; it then injects these mistakes
      and measures their effects, producing a resilience profile of the system
      under test. The resilience profile, capturing succinctly how sensitive the
      target software is to different classes of configuration errors, can be
      used for improving the software or to compare systems to each other.
    url: https://dslab.epfl.ch/research/conferr/
    code:
      type: Personal GitHub
      url: https://github.com/lokeller/conferr
      date_last_commit: 2015-03-14
    language: Java
    type: Application
    tags:
      - Debug
      - Failure
    information:
      - type: Paper
        title: "ConfErr: A Tool for Assessing Resilience to Human Configuration Errors"
        url: https://infoscience.epfl.ch/record/129043?ln=en
        notes:
          - label: Published at
            text: DSN 2008
            url: https://2008.dsn.org/
      - type: Poster
        title: "Arugula: A programming language for describing human errors"
        url: http://lorenzo.nodo.ch/media/files/papers/eurosys10-arugula.pdf
    date_added: 2021-11-03
    date_updated: 2022-07-05
  lfi:
    name: LFI
    categories:
      - Security
    applications:
      - Infra
    description: Library-level fault injection toolkit
    layman_desc: >
      LFI automatically identifies the errors exposed by shared libraries, finds
      potentially buggy error recovery code in program binaries, and produces
      corresponding injection scenarios.
    url: https://dslab.epfl.ch/research/lfi/
    code:
      type: Lab GitHub
      url: https://github.com/dslab-epfl/lfi
      date_last_commit: 2014-05-28
    language: C++
    license: GPL-3.0
    type: Application
    tags:
      - Debug
      - Failure
    information:
      - type: Paper
        title: Efficient Testing of Recovery Code Using Fault Injection
        url: https://dslab.epfl.ch/pubs/faultInjection.pdf
        notes:
          - label: Published in
            text: ACM Transactions on Computer Systems, December 2011
            url: https://dl.acm.org/doi/10.1145/2063509.2063511
    date_added: 2021-11-03
    date_updated: 2022-07-05
  svshi:
    name: SVSHI
    categories:
      - Verification
    applications:
      - Infra
    description: Verification framework for smart infrastructures
    layman_desc: >
      The Secure and Verified Smart Home Infrastructure project is a
      platform/runtime/toolchain for developing and running formally verified
      smart infrastructures, such as smart buildings, smart cities, etc.
    code:
      type: Lab GitHub
      url: https://github.com/dslab-epfl/svshi
      date_last_commit: 2022-08-12
    language: Python, Scala
    license: MIT
    type: Framework
    tags:
      - Internet of Things
      - Protection
    maturity: 3
    date_added: 2022-07-05
    date_updated: 2023-03-20
  klint:
    name: Klint
    categories:
      - Verification
    applications:
      - Infra
    description: Automated verification of network function binaries
    layman_desc: >
      Network functions are building blocks for "networks:" a router, a NAT or
      anything transforming packets. As it is handling all the traffic for a
      given infrastructure, it is crucial that it is implemented correctly.
      Klint helps in building and verifying theses functions.
    code:
      type: Lab GitHub
      url: https://github.com/dslab-epfl/klint
      date_last_commit: 2024-02-19
    language: C, Python
    license: MIT
    type: Toolset
    tags:
      - Code Analysis
      - Network
      - Server
      - Low-Level
    information:
      - type: Paper
        title: Automated Verification of Network Function Binaries
        url: https://infoscience.epfl.ch/record/294788
        notes:
          - label: Published in
            text: NSDI 2022
            url: https://www.usenix.org/conference/nsdi22/presentation/pirelli
    incubator:
      type: retired
      work: >
        For this project we implemented extended Berkley Packet Filtering (eBPF)
        support, so that the software verification can also be done for this
        type of code.
      products:
        - type: OSS-participation
          url: https://github.com/angr/angr-platforms/pull/55
          title: Adding support for eBPF to Angr
    maturity: 1
    date_added: 2022-07-05
    date_updated: 2024-03-08
  pix:
    name: PIX
    categories:
      - Verification
    applications:
      - Infra
    description: Show performance of network functions
    layman_desc: >
      Network functions speed is very important for any network-heavy
      infrastructure. PIX extracts performance metrics for these automatically,
      to help find regressions and bottlenecks.
    code:
      type: Lab GitHub
      url: https://github.com/dslab-epfl/pix
      date_last_commit: 2022-07-14
    language: C
    license: MIT
    type: Toolset
    tags:
      - Code Analysis
      - Network
      - Low-Level
    information:
      - type: Paper
        title: Performance Interfaces for Network Functions
        url: https://infoscience.epfl.ch/record/294787
        notes:
          - label: Published in
            text: NSDI 2022
            url: https://www.usenix.org/conference/nsdi22/presentation/iyer
    date_added: 2022-07-05
    date_updated: 2023-03-20
  ebpf-se:
    name: eBPF-SE
    description: |
      eBPF symbolic execution tool
    type: Application
    categories:
      - Security
    applications:
      - Infra
    tags:
      - Code Analysis
      - Debug
      - Network
    layman_desc: >
      eBPF-SE is a tool that analyzes programs written for the Linux kernel's
      eBPF framework. It systematically explores all possible execution paths
      through the program by using symbolic values instead of concrete inputs.
      This allows finding bugs or verifying properties of the program. eBPF-SE
      uses models of the Linux APIs to avoid getting bogged down in the real
      kernel code. It was originally part of a tool for optimizing network
      software performance.
    tech_desc: >
      eBPF-SE is a tool that symbolically executes eBPF programs written for the
      Linux kernel. It is based on the KLEE symbolic execution engine and uses
      models (stubs) for the Linux kernel's libbpf API. This allows exploring
      all program paths without path explosion from the real API implementation.
      eBPF-SE was previously part of PIX, a tool that extracts performance
      interfaces from network function code.
    code:
      type: Lab Github
      url: https://github.com/dslab-epfl/ebpf-se
      date_last_commit: 2024-03-05
    language: C
    license: MIT
    date_added: 2024-03-20
